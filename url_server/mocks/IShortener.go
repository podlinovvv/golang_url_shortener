// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	go_shortener_grpc "golang_url_shortener/proto"

	mock "github.com/stretchr/testify/mock"
)

// IShortener is an autogenerated mock type for the IShortener type
type IShortener struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, in
func (_m *IShortener) Create(ctx context.Context, in *go_shortener_grpc.FullUrl) (*go_shortener_grpc.ShortUrl, error) {
	ret := _m.Called(ctx, in)

	var r0 *go_shortener_grpc.ShortUrl
	if rf, ok := ret.Get(0).(func(context.Context, *go_shortener_grpc.FullUrl) *go_shortener_grpc.ShortUrl); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_shortener_grpc.ShortUrl)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *go_shortener_grpc.FullUrl) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, in
func (_m *IShortener) Get(ctx context.Context, in *go_shortener_grpc.ShortUrl) (*go_shortener_grpc.FullUrl, error) {
	ret := _m.Called(ctx, in)

	var r0 *go_shortener_grpc.FullUrl
	if rf, ok := ret.Get(0).(func(context.Context, *go_shortener_grpc.ShortUrl) *go_shortener_grpc.FullUrl); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_shortener_grpc.FullUrl)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *go_shortener_grpc.ShortUrl) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
