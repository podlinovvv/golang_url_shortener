// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	go_shortener_grpc "golang_url_shortener/proto"

	mock "github.com/stretchr/testify/mock"

	repository "golang_url_shortener/repository"
)

// IRepository is an autogenerated mock type for the IRepository type
type IRepository struct {
	mock.Mock
}

// FindMaxId provides a mock function with given fields: ctx
func (_m *IRepository) FindMaxId(ctx context.Context) int {
	ret := _m.Called(ctx)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// InsertNewUrl provides a mock function with given fields: ctx, s1, s2
func (_m *IRepository) InsertNewUrl(ctx context.Context, s1 string, s2 string) error {
	ret := _m.Called(ctx, s1, s2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, s1, s2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchFullUrlInDb provides a mock function with given fields: ctx, in
func (_m *IRepository) SearchFullUrlInDb(ctx context.Context, in *go_shortener_grpc.FullUrl) *repository.LinkFromDb {
	ret := _m.Called(ctx, in)

	var r0 *repository.LinkFromDb
	if rf, ok := ret.Get(0).(func(context.Context, *go_shortener_grpc.FullUrl) *repository.LinkFromDb); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.LinkFromDb)
		}
	}

	return r0
}

// SearchShortUrlInDb provides a mock function with given fields: ctx, link
func (_m *IRepository) SearchShortUrlInDb(ctx context.Context, link string) (string, error) {
	ret := _m.Called(ctx, link)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, link)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, link)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
